import java.awt.datatransfer.*;import java.awt.Toolkit;import java.awt.Color;import java.awt.Desktop;import java.awt.EventQueue;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.border.EmptyBorder;import java.awt.GridBagLayout;import java.awt.GridBagConstraints;import javax.swing.JButton;import java.awt.Insets;import javax.swing.JTextField;import javax.swing.SwingConstants;import java.awt.Font;import java.awt.event.*;import java.net.URI;import java.net.URISyntaxException;import java.net.URL;import javax.swing.JRadioButton;import javax.swing.BorderFactory;import javax.swing.ButtonGroup;import javax.swing.JTextArea;import javax.swing.JMenuBar;import javax.swing.JMenu;import javax.swing.JMenuItem;import java.awt.GridLayout;public class Calculator extends JFrame implements ActionListener, KeyListener, MouseListener {	private JPanel contentPane;	private JPanel contentPane_1;	private JTextField textField;	private JButton percentButton;	private JButton reciprocalButton;	private JButton equalsButton;	private JButton negateButton;	private JButton divButton;	private JButton multButton;	private JButton minusButton;	private JButton plusButton;	private JButton clearButton;	private JButton nineButton;	private JButton sixButton;	private JButton threeButton;	private JButton pointButton;	private JButton AButton;	private JButton BButton;	private JButton CButton;	private JButton DButton;	private JButton EButton;	private JButton FButton;	private JButton modButton;	private JButton zeroButton;	private JButton backspaceButton;	private JButton sevenButton;	private JButton fourButton;	private JButton oneButton;	private JButton ceButton;	private JButton eightButton;	private JButton fiveButton;	private JButton twoButton;	/**	 * Launch the application.	 */	public static void main(String[] args) {		EventQueue.invokeLater(new Runnable() {			public void run() {				try {					Calculator frame = new Calculator();					frame.setVisible(true);				} catch (Exception e) {					e.printStackTrace();				}			}		});	}	/**	 * Create the frame.	 */	public Calculator() {		setTitle("Calculator");		setBackground(Color.WHITE);		setResizable(false);				setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);				setBounds(100, 100, 838, 769);		contentPane = new JPanel();        		// menu bar, menus, and menu items		/***********************************************/        menuBar = new JMenuBar();        setJMenuBar(menuBar);                mnView = new JMenu("View");        mnView.setFont(new Font("Segoe UI", Font.PLAIN, 30));        menuBar.add(mnView);                mntmHideCalculator = new JMenuItem("Hide Calculator");        mntmHideCalculator.setFont(new Font("Segoe UI", Font.PLAIN, 30));        mnView.add(mntmHideCalculator);        mntmHideCalculator.addActionListener(this);                mnEdit = new JMenu("Edit");        mnEdit.setFont(new Font("Segoe UI", Font.PLAIN, 30));        menuBar.add(mnEdit);                mntmCopyText = new JMenuItem("Copy Text");        mntmCopyText.addActionListener(this);        mntmCopyText.setFont(new Font("Segoe UI", Font.PLAIN, 30));        mnEdit.add(mntmCopyText);                mnHelp = new JMenu("Help");        mnHelp.setFont(new Font("Segoe UI", Font.PLAIN, 30));        menuBar.add(mnHelp);                        btnViewHelp = new JButton("View Help");        btnViewHelp.addActionListener(this);        btnViewHelp.setFont(new Font("Tahoma", Font.PLAIN, 26));        mnHelp.add(btnViewHelp);     		/***************************************************/		        // content pane        /***************************************************/        contentPane_1 = new JPanel();		contentPane_1.setBackground(new Color(216, 228, 240));		contentPane_1.setBorder(new EmptyBorder(5, 5, 5, 5));		setContentPane(contentPane_1);				 GridBagLayout gbl_contentPane_1 = new GridBagLayout();	     gbl_contentPane_1.columnWidths = new int[]{139, 99, 58, 61, 73, 74, 78, 55, 81, 0};	     gbl_contentPane_1.rowHeights = new int[]{32, 83, 110, 72, 89, 66, 46, 56, 57, 0};	     gbl_contentPane_1.columnWeights = new double[]{1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};	     gbl_contentPane_1.rowWeights = new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, Double.MIN_VALUE};	     contentPane_1.setLayout(gbl_contentPane_1);                // buttons        /******************************************************/                                AButton = new JButton("A");        AButton.addActionListener(this);        AButton.addMouseListener(this);                               modButton = new JButton("Mod");        modButton.addActionListener(this);        modButton.addMouseListener(this);                textArea = new JTextArea();        textArea.setFont(new Font("Monospaced", Font.PLAIN, 33));        textArea.setEditable(false);        textArea.setBorder(BorderFactory.createLineBorder(Color.black));        textArea.setBackground(new Color(216, 228, 240));        String binaryText = new String(" 0000 0000 0000 0000 0000 0000 0000 0000\n 0000 0000 0000 0000 0000 0000 0000 0000");        textArea.setText(binaryText);              GridBagConstraints gbc_textArea = new GridBagConstraints();        gbc_textArea.fill = GridBagConstraints.BOTH;        gbc_textArea.insets = new Insets(0, 0, 5, 0);        gbc_textArea.gridwidth = 9;        gbc_textArea.gridx = 0;        gbc_textArea.gridy = 2;        contentPane_1.add(textArea, gbc_textArea);                panel = new JPanel();        GridBagConstraints gbc_panel = new GridBagConstraints();        gbc_panel.gridheight = 3;        gbc_panel.insets = new Insets(0, 0, 5, 5);        gbc_panel.fill = GridBagConstraints.BOTH;        gbc_panel.gridx = 0;        gbc_panel.gridy = 3;        contentPane_1.add(panel, gbc_panel);        panel.setLayout(new GridLayout(0, 1, 0, 0));                        hexButton = new JRadioButton("Hex");        panel.add(hexButton);        buttonGroup.add(hexButton);        hexButton.addActionListener(this);        hexButton.setFont(new Font("Tahoma", Font.PLAIN, 25));                decButton = new JRadioButton("Dec");        panel.add(decButton);        decButton.setSelected(true);        buttonGroup.add(decButton);        decButton.addActionListener(this);        decButton.setFont(new Font("Tahoma", Font.PLAIN, 25));                octButton = new JRadioButton("Oct ");        panel.add(octButton);        buttonGroup.add(octButton);        octButton.addActionListener(this);        octButton.setFont(new Font("Tahoma", Font.PLAIN, 25));                binButton = new JRadioButton("Bin ");        panel.add(binButton);        buttonGroup.add(binButton);        binButton.addActionListener(this);        binButton.setFont(new Font("Tahoma", Font.PLAIN, 25));                button_9 = new JButton("");        button_9.setEnabled(false);        GridBagConstraints gbc_button_9 = new GridBagConstraints();        gbc_button_9.fill = GridBagConstraints.BOTH;        gbc_button_9.insets = new Insets(0, 0, 5, 5);        gbc_button_9.gridx = 1;        gbc_button_9.gridy = 3;        contentPane_1.add(button_9, gbc_button_9);        modButton.setFont(new Font("Times New Roman", Font.PLAIN, 30));        GridBagConstraints gbc_modButton = new GridBagConstraints();        gbc_modButton.anchor = GridBagConstraints.EAST;        gbc_modButton.fill = GridBagConstraints.VERTICAL;        gbc_modButton.insets = new Insets(0, 0, 5, 5);        gbc_modButton.gridx = 2;        gbc_modButton.gridy = 3;        contentPane_1.add(modButton, gbc_modButton);        AButton.setEnabled(false);        AButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_AButton = new GridBagConstraints();        gbc_AButton.anchor = GridBagConstraints.WEST;        gbc_AButton.fill = GridBagConstraints.VERTICAL;        gbc_AButton.insets = new Insets(0, 0, 5, 5);        gbc_AButton.gridx = 3;        gbc_AButton.gridy = 3;        contentPane_1.add(AButton, gbc_AButton);                divButton = new JButton("/");        divButton.addActionListener(this);        divButton.addMouseListener(this);                nineButton = new JButton("9");        nineButton.addActionListener(this);        nineButton.addMouseListener(this);                eightButton = new JButton("8");        eightButton.addActionListener(this);        eightButton.addMouseListener(this);                CButton = new JButton("C");        CButton.addActionListener(this);        CButton.addMouseListener(this);                BButton = new JButton("B");        BButton.addActionListener(this);        BButton.addMouseListener(this);                btnNewButton = new JButton("");        btnNewButton.setEnabled(false);        GridBagConstraints gbc_btnNewButton = new GridBagConstraints();        gbc_btnNewButton.fill = GridBagConstraints.BOTH;        gbc_btnNewButton.insets = new Insets(0, 0, 5, 5);        gbc_btnNewButton.gridx = 4;        gbc_btnNewButton.gridy = 3;        contentPane_1.add(btnNewButton, gbc_btnNewButton);                button = new JButton("");        button.setEnabled(false);        GridBagConstraints gbc_button = new GridBagConstraints();        gbc_button.fill = GridBagConstraints.BOTH;        gbc_button.insets = new Insets(0, 0, 5, 5);        gbc_button.gridx = 5;        gbc_button.gridy = 3;        contentPane_1.add(button, gbc_button);                button_1 = new JButton("");        button_1.setEnabled(false);        GridBagConstraints gbc_button_1 = new GridBagConstraints();        gbc_button_1.fill = GridBagConstraints.BOTH;        gbc_button_1.insets = new Insets(0, 0, 5, 5);        gbc_button_1.gridx = 6;        gbc_button_1.gridy = 3;        contentPane_1.add(button_1, gbc_button_1);                button_2 = new JButton("");        button_2.setEnabled(false);        GridBagConstraints gbc_button_2 = new GridBagConstraints();        gbc_button_2.fill = GridBagConstraints.BOTH;        gbc_button_2.insets = new Insets(0, 0, 5, 5);        gbc_button_2.gridx = 7;        gbc_button_2.gridy = 3;        contentPane_1.add(button_2, gbc_button_2);                button_3 = new JButton("");        button_3.setEnabled(false);        GridBagConstraints gbc_button_3 = new GridBagConstraints();        gbc_button_3.fill = GridBagConstraints.BOTH;        gbc_button_3.insets = new Insets(0, 0, 5, 0);        gbc_button_3.gridx = 8;        gbc_button_3.gridy = 3;        contentPane_1.add(button_3, gbc_button_3);                button_10 = new JButton("");        button_10.setEnabled(false);        GridBagConstraints gbc_button_10 = new GridBagConstraints();        gbc_button_10.fill = GridBagConstraints.BOTH;        gbc_button_10.insets = new Insets(0, 0, 5, 5);        gbc_button_10.gridx = 1;        gbc_button_10.gridy = 4;        contentPane_1.add(button_10, gbc_button_10);                button_4 = new JButton("");        button_4.setEnabled(false);        GridBagConstraints gbc_button_4 = new GridBagConstraints();        gbc_button_4.fill = GridBagConstraints.BOTH;        gbc_button_4.insets = new Insets(0, 0, 5, 5);        gbc_button_4.gridx = 2;        gbc_button_4.gridy = 4;        contentPane_1.add(button_4, gbc_button_4);               BButton.setEnabled(false);        BButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_BButton = new GridBagConstraints();        gbc_BButton.fill = GridBagConstraints.BOTH;        gbc_BButton.insets = new Insets(0, 0, 5, 5);        gbc_BButton.gridx = 3;        gbc_BButton.gridy = 4;        contentPane_1.add(BButton, gbc_BButton);                negateButton = new JButton("±");        negateButton.addActionListener(this);        negateButton.addMouseListener(this);                ceButton = new JButton("CE");        ceButton.addActionListener(this);        ceButton.addMouseListener(this);                backspaceButton = new JButton("←");        backspaceButton.addActionListener(this);        backspaceButton.addMouseListener(this);        backspaceButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_backspaceButton = new GridBagConstraints();        gbc_backspaceButton.fill = GridBagConstraints.VERTICAL;        gbc_backspaceButton.insets = new Insets(0, 0, 5, 5);        gbc_backspaceButton.gridx = 4;        gbc_backspaceButton.gridy = 4;        contentPane_1.add(backspaceButton, gbc_backspaceButton);        ceButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_ceButton = new GridBagConstraints();        gbc_ceButton.anchor = GridBagConstraints.WEST;        gbc_ceButton.fill = GridBagConstraints.VERTICAL;        gbc_ceButton.insets = new Insets(0, 0, 5, 5);        gbc_ceButton.gridx = 5;        gbc_ceButton.gridy = 4;        contentPane_1.add(ceButton, gbc_ceButton);                clearButton = new JButton("C");        clearButton.addActionListener(this);        clearButton.addMouseListener(this);        clearButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_clearButton = new GridBagConstraints();        gbc_clearButton.fill = GridBagConstraints.BOTH;        gbc_clearButton.insets = new Insets(0, 0, 5, 5);        gbc_clearButton.gridx = 6;        gbc_clearButton.gridy = 4;        contentPane_1.add(clearButton, gbc_clearButton);        negateButton.setFont(new Font("Times New Roman", Font.PLAIN, 40));        GridBagConstraints gbc_negateButton = new GridBagConstraints();        gbc_negateButton.fill = GridBagConstraints.VERTICAL;        gbc_negateButton.anchor = GridBagConstraints.WEST;        gbc_negateButton.insets = new Insets(0, 0, 5, 5);        gbc_negateButton.gridx = 7;        gbc_negateButton.gridy = 4;        contentPane_1.add(negateButton, gbc_negateButton);                JButton sqrtButton = new JButton("√");        sqrtButton.setEnabled(false);        sqrtButton.setFont(new Font("Times New Roman", Font.BOLD, 30));        GridBagConstraints gbc_sqrtButton = new GridBagConstraints();        gbc_sqrtButton.fill = GridBagConstraints.BOTH;        gbc_sqrtButton.insets = new Insets(0, 0, 5, 0);        gbc_sqrtButton.gridx = 8;        gbc_sqrtButton.gridy = 4;        contentPane_1.add(sqrtButton, gbc_sqrtButton);                button_11 = new JButton("");        button_11.setEnabled(false);        GridBagConstraints gbc_button_11 = new GridBagConstraints();        gbc_button_11.fill = GridBagConstraints.BOTH;        gbc_button_11.insets = new Insets(0, 0, 5, 5);        gbc_button_11.gridx = 1;        gbc_button_11.gridy = 5;        contentPane_1.add(button_11, gbc_button_11);                button_5 = new JButton("");        button_5.setEnabled(false);        GridBagConstraints gbc_button_5 = new GridBagConstraints();        gbc_button_5.fill = GridBagConstraints.BOTH;        gbc_button_5.insets = new Insets(0, 0, 5, 5);        gbc_button_5.gridx = 2;        gbc_button_5.gridy = 5;        contentPane_1.add(button_5, gbc_button_5);        CButton.setEnabled(false);        CButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_CButton = new GridBagConstraints();        gbc_CButton.anchor = GridBagConstraints.WEST;        gbc_CButton.fill = GridBagConstraints.VERTICAL;        gbc_CButton.insets = new Insets(0, 0, 5, 5);        gbc_CButton.gridx = 3;        gbc_CButton.gridy = 5;        contentPane_1.add(CButton, gbc_CButton);                sevenButton = new JButton("7");        sevenButton.addActionListener(this);        sevenButton.addMouseListener(this);        sevenButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_sevenButton = new GridBagConstraints();        gbc_sevenButton.fill = GridBagConstraints.BOTH;        gbc_sevenButton.insets = new Insets(0, 0, 5, 5);        gbc_sevenButton.gridx = 4;        gbc_sevenButton.gridy = 5;        contentPane_1.add(sevenButton, gbc_sevenButton);        eightButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_eightButton = new GridBagConstraints();        gbc_eightButton.fill = GridBagConstraints.BOTH;        gbc_eightButton.insets = new Insets(0, 0, 5, 5);        gbc_eightButton.gridx = 5;        gbc_eightButton.gridy = 5;        contentPane_1.add(eightButton, gbc_eightButton);        nineButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_nineButton = new GridBagConstraints();        gbc_nineButton.fill = GridBagConstraints.BOTH;        gbc_nineButton.insets = new Insets(0, 0, 5, 5);        gbc_nineButton.gridx = 6;        gbc_nineButton.gridy = 5;        contentPane_1.add(nineButton, gbc_nineButton);        divButton.setFont(new Font("Tahoma", Font.PLAIN, 40));        GridBagConstraints gbc_divButton = new GridBagConstraints();        gbc_divButton.fill = GridBagConstraints.BOTH;        gbc_divButton.insets = new Insets(0, 0, 5, 5);        gbc_divButton.gridx = 7;        gbc_divButton.gridy = 5;        contentPane_1.add(divButton, gbc_divButton);                oneButton = new JButton("1");        oneButton.addActionListener(this);        oneButton.addMouseListener(this);                sixButton = new JButton("6");        sixButton.addActionListener(this);        sixButton.addMouseListener(this);                percentButton = new JButton("%");        percentButton.setEnabled(false);        percentButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_percentButton = new GridBagConstraints();        gbc_percentButton.fill = GridBagConstraints.BOTH;        gbc_percentButton.insets = new Insets(0, 0, 5, 0);        gbc_percentButton.gridx = 8;        gbc_percentButton.gridy = 5;        contentPane_1.add(percentButton, gbc_percentButton);                fourButton = new JButton("4");        fourButton.addActionListener(this);        fourButton.addMouseListener(this);                DButton = new JButton("D");        DButton.addActionListener(this);        DButton.addMouseListener(this);                panel_1 = new JPanel();        GridBagConstraints gbc_panel_1 = new GridBagConstraints();        gbc_panel_1.gridheight = 3;        gbc_panel_1.insets = new Insets(0, 0, 0, 5);        gbc_panel_1.fill = GridBagConstraints.BOTH;        gbc_panel_1.gridx = 0;        gbc_panel_1.gridy = 6;        contentPane_1.add(panel_1, gbc_panel_1);        panel_1.setLayout(new GridLayout(0, 1, 0, 0));                rdbtnQword = new JRadioButton("Qword");        panel_1.add(rdbtnQword);        rdbtnQword.setFont(new Font("Tahoma", Font.PLAIN, 25));        rdbtnQword.setSelected(true);        rdbtnQword.setEnabled(false);                rdbtnNewRadioButton = new JRadioButton("Dword");        panel_1.add(rdbtnNewRadioButton);        rdbtnNewRadioButton.setFont(new Font("Tahoma", Font.PLAIN, 25));        rdbtnNewRadioButton.setEnabled(false);                rdbtnWord = new JRadioButton("Word");        panel_1.add(rdbtnWord);        rdbtnWord.setFont(new Font("Tahoma", Font.PLAIN, 25));        rdbtnWord.setEnabled(false);                rdbtnByte = new JRadioButton("Byte");        rdbtnByte.setEnabled(false);        rdbtnByte.setFont(new Font("Tahoma", Font.PLAIN, 25));        panel_1.add(rdbtnByte);                button_12 = new JButton("");        button_12.setEnabled(false);        GridBagConstraints gbc_button_12 = new GridBagConstraints();        gbc_button_12.fill = GridBagConstraints.BOTH;        gbc_button_12.insets = new Insets(0, 0, 5, 5);        gbc_button_12.gridx = 1;        gbc_button_12.gridy = 6;        contentPane_1.add(button_12, gbc_button_12);                button_6 = new JButton("");        button_6.setEnabled(false);        GridBagConstraints gbc_button_6 = new GridBagConstraints();        gbc_button_6.fill = GridBagConstraints.BOTH;        gbc_button_6.insets = new Insets(0, 0, 5, 5);        gbc_button_6.gridx = 2;        gbc_button_6.gridy = 6;        contentPane_1.add(button_6, gbc_button_6);        DButton.setEnabled(false);        DButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_DButton = new GridBagConstraints();        gbc_DButton.fill = GridBagConstraints.VERTICAL;        gbc_DButton.anchor = GridBagConstraints.WEST;        gbc_DButton.insets = new Insets(0, 0, 5, 5);        gbc_DButton.gridx = 3;        gbc_DButton.gridy = 6;        contentPane_1.add(DButton, gbc_DButton);        fourButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_fourButton = new GridBagConstraints();        gbc_fourButton.fill = GridBagConstraints.BOTH;        gbc_fourButton.insets = new Insets(0, 0, 5, 5);        gbc_fourButton.gridx = 4;        gbc_fourButton.gridy = 6;        contentPane_1.add(fourButton, gbc_fourButton);                fiveButton = new JButton("5");        fiveButton.addActionListener(this);        fiveButton.addMouseListener(this);        fiveButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_fiveButton = new GridBagConstraints();        gbc_fiveButton.fill = GridBagConstraints.BOTH;        gbc_fiveButton.insets = new Insets(0, 0, 5, 5);        gbc_fiveButton.gridx = 5;        gbc_fiveButton.gridy = 6;        contentPane_1.add(fiveButton, gbc_fiveButton);        sixButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_sixButton = new GridBagConstraints();        gbc_sixButton.fill = GridBagConstraints.BOTH;        gbc_sixButton.insets = new Insets(0, 0, 5, 5);        gbc_sixButton.gridx = 6;        gbc_sixButton.gridy = 6;        contentPane_1.add(sixButton, gbc_sixButton);                multButton = new JButton("*");        multButton.addActionListener(this);        multButton.addMouseListener(this);        multButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_multButton = new GridBagConstraints();        gbc_multButton.fill = GridBagConstraints.BOTH;        gbc_multButton.insets = new Insets(0, 0, 5, 5);        gbc_multButton.gridx = 7;        gbc_multButton.gridy = 6;        contentPane_1.add(multButton, gbc_multButton);                reciprocalButton = new JButton("1/x");        reciprocalButton.setEnabled(false);        reciprocalButton.setFont(new Font("Times New Roman", Font.BOLD, 26));        GridBagConstraints gbc_reciprocalButton = new GridBagConstraints();        gbc_reciprocalButton.fill = GridBagConstraints.BOTH;        gbc_reciprocalButton.insets = new Insets(0, 0, 5, 0);        gbc_reciprocalButton.gridx = 8;        gbc_reciprocalButton.gridy = 6;        contentPane_1.add(reciprocalButton, gbc_reciprocalButton);                EButton = new JButton("E");        EButton.addActionListener(this);        EButton.addMouseListener(this);                button_13 = new JButton("");        button_13.setEnabled(false);        GridBagConstraints gbc_button_13 = new GridBagConstraints();        gbc_button_13.fill = GridBagConstraints.BOTH;        gbc_button_13.insets = new Insets(0, 0, 5, 5);        gbc_button_13.gridx = 1;        gbc_button_13.gridy = 7;        contentPane_1.add(button_13, gbc_button_13);                button_7 = new JButton("");        button_7.setEnabled(false);        GridBagConstraints gbc_button_7 = new GridBagConstraints();        gbc_button_7.fill = GridBagConstraints.BOTH;        gbc_button_7.insets = new Insets(0, 0, 5, 5);        gbc_button_7.gridx = 2;        gbc_button_7.gridy = 7;        contentPane_1.add(button_7, gbc_button_7);        EButton.setEnabled(false);        EButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_EButton = new GridBagConstraints();        gbc_EButton.fill = GridBagConstraints.BOTH;        gbc_EButton.insets = new Insets(0, 0, 5, 5);        gbc_EButton.gridx = 3;        gbc_EButton.gridy = 7;        contentPane_1.add(EButton, gbc_EButton);        oneButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_oneButton = new GridBagConstraints();        gbc_oneButton.fill = GridBagConstraints.BOTH;        gbc_oneButton.insets = new Insets(0, 0, 5, 5);        gbc_oneButton.gridx = 4;        gbc_oneButton.gridy = 7;        contentPane_1.add(oneButton, gbc_oneButton);                zeroButton = new JButton("0");        zeroButton.addActionListener(this);        zeroButton.addMouseListener(this);                FButton = new JButton("F");        FButton.addActionListener(this);        FButton.addMouseListener(this);                minusButton = new JButton("-");        minusButton.addActionListener(this);        minusButton.addMouseListener(this);                threeButton = new JButton("3");        threeButton.addActionListener(this);        threeButton.addMouseListener(this);                twoButton = new JButton("2");        twoButton.addActionListener(this);        twoButton.addMouseListener(this);        twoButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_twoButton = new GridBagConstraints();        gbc_twoButton.fill = GridBagConstraints.BOTH;        gbc_twoButton.insets = new Insets(0, 0, 5, 5);        gbc_twoButton.gridx = 5;        gbc_twoButton.gridy = 7;        contentPane_1.add(twoButton, gbc_twoButton);        threeButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_threeButton = new GridBagConstraints();        gbc_threeButton.fill = GridBagConstraints.BOTH;        gbc_threeButton.insets = new Insets(0, 0, 5, 5);        gbc_threeButton.gridx = 6;        gbc_threeButton.gridy = 7;        contentPane_1.add(threeButton, gbc_threeButton);        minusButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_minusButton = new GridBagConstraints();        gbc_minusButton.fill = GridBagConstraints.BOTH;        gbc_minusButton.insets = new Insets(0, 0, 5, 5);        gbc_minusButton.gridx = 7;        gbc_minusButton.gridy = 7;        contentPane_1.add(minusButton, gbc_minusButton);                equalsButton = new JButton("=");        equalsButton.addActionListener(this);        equalsButton.addMouseListener(this);        equalsButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_equalsButton = new GridBagConstraints();        gbc_equalsButton.fill = GridBagConstraints.BOTH;        gbc_equalsButton.gridheight = 2;        gbc_equalsButton.gridx = 8;        gbc_equalsButton.gridy = 7;        contentPane_1.add(equalsButton, gbc_equalsButton);                button_14 = new JButton("");        button_14.setEnabled(false);        GridBagConstraints gbc_button_14 = new GridBagConstraints();        gbc_button_14.fill = GridBagConstraints.BOTH;        gbc_button_14.insets = new Insets(0, 0, 0, 5);        gbc_button_14.gridx = 1;        gbc_button_14.gridy = 8;        contentPane_1.add(button_14, gbc_button_14);                button_8 = new JButton("");        button_8.setEnabled(false);        GridBagConstraints gbc_button_8 = new GridBagConstraints();        gbc_button_8.fill = GridBagConstraints.BOTH;        gbc_button_8.insets = new Insets(0, 0, 0, 5);        gbc_button_8.gridx = 2;        gbc_button_8.gridy = 8;        contentPane_1.add(button_8, gbc_button_8);        FButton.setEnabled(false);        FButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_FButton = new GridBagConstraints();        gbc_FButton.fill = GridBagConstraints.BOTH;        gbc_FButton.insets = new Insets(0, 0, 0, 5);        gbc_FButton.gridx = 3;        gbc_FButton.gridy = 8;        contentPane_1.add(FButton, gbc_FButton);        zeroButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_zeroButton = new GridBagConstraints();        gbc_zeroButton.fill = GridBagConstraints.HORIZONTAL;        gbc_zeroButton.insets = new Insets(0, 0, 0, 5);        gbc_zeroButton.gridwidth = 2;        gbc_zeroButton.gridx = 4;        gbc_zeroButton.gridy = 8;        contentPane_1.add(zeroButton, gbc_zeroButton);                plusButton = new JButton("+");        plusButton.addActionListener(this);        plusButton.addMouseListener(this);                pointButton = new JButton(".");        pointButton.setEnabled(false);        pointButton.setFont(new Font("Times New Roman", Font.PLAIN, 40));        GridBagConstraints gbc_pointButton = new GridBagConstraints();        gbc_pointButton.fill = GridBagConstraints.BOTH;        gbc_pointButton.insets = new Insets(0, 0, 0, 5);        gbc_pointButton.gridx = 6;        gbc_pointButton.gridy = 8;        contentPane_1.add(pointButton, gbc_pointButton);        plusButton.setFont(new Font("Times New Roman", Font.BOLD, 40));        GridBagConstraints gbc_plusButton = new GridBagConstraints();        gbc_plusButton.anchor = GridBagConstraints.WEST;        gbc_plusButton.fill = GridBagConstraints.VERTICAL;        gbc_plusButton.insets = new Insets(0, 0, 0, 5);        gbc_plusButton.gridx = 7;        gbc_plusButton.gridy = 8;        contentPane_1.add(plusButton, gbc_plusButton);                /**********************************************************************/            textField = new JTextField();        textField.setEditable(false);        textField.addKeyListener(this);        textField.requestFocus();                textField.setFont(new Font("Lucida Sans Unicode", Font.PLAIN, 50));        textField.setHorizontalAlignment(SwingConstants.RIGHT);        textField.setText("0");        textField.setBackground(new Color(191, 205, 219));        GridBagConstraints gbc_textField = new GridBagConstraints();        gbc_textField.fill = GridBagConstraints.BOTH;        gbc_textField.insets = new Insets(0, 0, 5, 0);        gbc_textField.gridwidth = 9;        gbc_textField.gridx = 0;        gbc_textField.gridy = 1;        contentPane_1.add(textField, gbc_textField);                        /***********************************************************************/        				} // end Calculator()		//********************************************************//			// variable to hold each operand as a string	String operand = "";		// variable to hold the result of operations done	Long op1 = 0l; 		// long to hold the negated value of the operand    Long negatedOperand = 0l;    //*********************************************************//		// boolean values to be used with equals (for mouse-clicked buttons)	// determines which operation to perform on two operands.	boolean plus = false;	boolean minus = false;	boolean div = false;	boolean mult = false;	boolean mod = false; 	boolean equals = false;		// booleans to indicate what radio button was last pressed	boolean bin = false;	boolean hex = false;	boolean oct = false;	boolean dec = true;		// boolean to indicate that negate was pressed	boolean negate = false;		// long to hold a positive value	Long posVal;		// to be used in equals	String result = "";	Long resultForNegate = 0l;		// function to represent decimal values as binary values in the binary text field	public void binaryFieldDecimal(String number)	{   		String binary = Long.toBinaryString(Long.parseLong(number));		StringBuilder binaryText1 = new StringBuilder("0000000000000000000000000000000000000000000000000000000000000000");				// replace the last n characters of binaryText1 with binary, where n is binary.length()		binaryText1.replace(binaryText1.length() - binary.length(), binaryText1.length(), binary);				// place a space every four bits		for(int i = 0; i < 82; i+= 5)		{			binaryText1.insert(i, " ");		} // end for				// insert a newline exactly halfway down the string		binaryText1.insert(40, "\n");				// display the output to the console (for testing)		System.out.println(binaryText1);				// convert the stringbuilder to a string		String binaryText1AsString = new String(binaryText1);		textArea.setText(binaryText1AsString);			} // end binaryFieldDecimal			// functionality.		public void actionPerformed(ActionEvent e)	{				if(e.getSource() == AButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("A");			textField.setText(operand);			binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));		}		else if(e.getSource() == BButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("B");			textField.setText(operand);			binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));		}		else if(e.getSource() == CButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("C");			textField.setText(operand);			binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));		}		else if(e.getSource() == DButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("D");			textField.setText(operand);			binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));		}		else if(e.getSource() == EButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("E");			textField.setText(operand);			binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));		}		else if(e.getSource() == FButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("F");			textField.setText(operand);			binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));		}		else if(e.getSource() == oneButton)		{			if(equals == true)			{				op1 = 0l;			}						operand = operand.concat("1");			textField.setText(operand);						if(hex == true)			{				binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));			}			else			{				binaryFieldDecimal(operand);			}		}		else if(e.getSource() == twoButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("2");			textField.setText(operand);						if(hex == true)			{				binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));			}			else			{				binaryFieldDecimal(operand);			}		}		else if(e.getSource() == threeButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("3");			textField.setText(operand);			if(hex == true)			{				binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));			}			else			{				binaryFieldDecimal(operand);			}		}		else if(e.getSource() == fourButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("4");			textField.setText(operand);			if(hex == true)			{				binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));			}			else			{				binaryFieldDecimal(operand);			}		}		else if(e.getSource() == fiveButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("5");			textField.setText(operand);			if(hex == true)			{				binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));			}			else			{				binaryFieldDecimal(operand);			}		}		else if(e.getSource() == sixButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("6");			textField.setText(operand);			if(hex == true)			{				binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));			}			else			{				binaryFieldDecimal(operand);			}		}		else if(e.getSource() == sevenButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("7");			textField.setText(operand);			if(hex == true)			{				binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));			}			else			{				binaryFieldDecimal(operand);			}		}		else if(e.getSource() == eightButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("8");			textField.setText(operand);			if(hex == true)			{				binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));			}			else			{				binaryFieldDecimal(operand);			}		}		else if(e.getSource() == nineButton)		{			if(equals == true)			{				op1 = 0l;			}			operand = operand.concat("9");			textField.setText(operand);			if(hex == true)			{				binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));			}			else			{				binaryFieldDecimal(operand);			}					}		else if(e.getSource() == zeroButton)		{			if(equals == true)			{				op1 = 0l;			}			if(operand != "" || plus == true || minus == true || div  == true || mult == true || mod == true)			{				operand = operand.concat("0");				textField.setText(operand);				if(hex == true)				{					binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));				}				else				{					binaryFieldDecimal(operand);				}			}											} // end action for zeroButton						else if(e.getSource() == clearButton)		{			operand = "";			textField.setText("0");			op1 = 0l;			binaryFieldDecimal("0");					} // end action for clearButton		else if(e.getSource() == ceButton)		{			operand = "0";			textField.setText(operand);			binaryFieldDecimal("0");			operand = "";					}						else if(e.getSource() == plusButton)		{			// if the decimal radio button is selected, 			// run operation for decimal addition.			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// plus was used				plus = true;				minus = false;				div = false;				mult = false;				mod = false;				equals = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// plus was used				plus = true;				minus = false;				div = false;				mult = false;				mod = false;				equals = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// plus was used				plus = true;				minus = false;				div = false;				mult = false;				mod = false;				equals = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// plus was used				plus = true;				minus = false;				div = false;				mult = false;				mod = false;				equals = false;			} // end if bin is selected								}// end action for plus button				else if(e.getSource() == minusButton)		{			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// minus was used				plus = false;				minus = true;				div = false;				mult = false;				mod = false;				equals = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// minus was used				plus = false;				minus = true;				div = false;				mult = false;				mod = false;				equals = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// minus was used				plus = false;				minus = true;				div = false;				mult = false;				mod = false;				equals = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// minus was used				plus = false;				minus = true;				div = false;				mult = false;				mod = false;				equals = false;			} // end if bin is selected					} // end action for minusButton				else if(e.getSource() == divButton)		{			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// div was used				plus = false;				minus = false;				div = true;				mult = false;				mod = false;				equals = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// div was used				plus = false;				minus = false;				div = true;				mult = false;				mod = false;				equals = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// div was used				plus = false;				minus = false;				div = true;				mult = false;				mod = false;				equals = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// div was used				plus = false;				minus = false;				div = true;				mult = false;				mod = false;				equals = false;			} // end if bin is selected					} // end action for divButton				else if(e.getSource() == multButton)		{			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// mult was used				plus = false;				minus = false;				div = false;				mult = true;				mod = false;				equals = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// mult was used				plus = false;				minus = false;				div = false;				mult = true;				mod = false;				equals = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// mult was used				plus = false;				minus = false;				div = false;				mult = true;				mod = false;				equals = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// mult was used				plus = false;				minus = false;				div = false;				mult = true;				mod = false;				equals = false;			} // end if bin is selected					} // end action for multButton						else if(e.getSource() == backspaceButton)		{			if(operand.length() == 1)			{				operand = "0";				textField.setText(operand);				binaryFieldDecimal(operand);			} // end if operand has length 1			else if(operand == "")			{				// do nothing			} // end else if operand is empty			else // in this case, operand is a string of length greater than 1. Replace it in the 				// text field with a string equaling the original string without its last character.			{								String sub = operand.substring(0,  operand.length() - 1);				operand = sub;				textField.setText(operand);				if(dec == true)				{					binaryFieldDecimal(operand);				}				else if(hex == true)				{					// parse the hex string as a decimal integer, then as a decimal string					// and send to binaryFieldDecimal					binaryFieldDecimal(Integer.toString(Integer.parseInt(operand, 16)));				}				else if (oct == true)				{					// parse the octal string as a decimal integer, then as a decimal string					// and send to binaryFieldDecimal					binaryFieldDecimal(Integer.toString(Integer.parseInt(operand, 8)));				}				else if (bin == true)				{					// parse the binary string as a decimal integer, then as a decimal string					// and send to binaryFieldDecimal					binaryFieldDecimal(Integer.toString(Integer.parseInt(operand, 2)));				}							} // end else		} // end action for backspaceButton				else if (e.getSource() == modButton)		{			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// mod was used				plus = false;				minus = false;				div = false;				mult = false;				mod = true;				equals = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// mod was used				plus = false;				minus = false;				div = false;				mult = false;				mod = true;				equals = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// mod was used				plus = false;				minus = false;				div = false;				mult = false;				mod = true;				equals = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// mod was used				plus = false;				minus = false;				div = false;				mult = false;				mod = true;				equals = false;			} // end if bin is selected								} // end action for modButton						else if (e.getSource() == negateButton)		{			// if the equals button was pressed, meaning that the 			// operand has been reset			if(operand == "")			{				if(dec == true)				{					// set operand to the parsed string(negatedOperand * -1)					operand = Long.toString(negatedOperand*(-1));					textField.setText(operand);					binaryFieldDecimal(operand);					posVal = negatedOperand;				}				else if(hex == true)				{					operand = Long.toHexString(negatedOperand*(-1)).toUpperCase();					textField.setText(operand);					binaryFieldDecimal(Long.toString(negatedOperand*(-1)));					posVal = negatedOperand;				}				else if(oct == true)				{					operand = Long.toOctalString(negatedOperand*(-1));					textField.setText(operand);					binaryFieldDecimal(Long.toString(negatedOperand*(-1)));					posVal = negatedOperand;				}				else if(bin == true)				{					operand = Long.toBinaryString(negatedOperand*(-1));					textField.setText(operand);					binaryFieldDecimal(Long.toString(negatedOperand*(-1)));					posVal = negatedOperand;				}							} // end if						// else, if operand is actually something			else if (operand != "")			{				if(operand == "0")				{					// do nothing				}				else				{					if (dec == true)					{						Long temp = Long.parseLong(operand) * -1;						// store the positive value;						posVal = Long.parseLong(operand);						operand = Long.toString(temp);						textField.setText(operand);						binaryFieldDecimal(operand);																	}					else if(hex == true)					{						// if the value to be negated is false						if(negate == false)						{							// temp variable holds the integer value of the converted hex string, negated							Long temp = Long.parseLong(operand, 16)*-1;														// store the positive value;							posVal = Long.parseLong(operand, 16);														// convert temp (a negative decimal value) into a hex string							operand = Long.toHexString(temp).toUpperCase();														System.out.println(operand);																					// send temp to binaryFieldDecimal							binaryFieldDecimal(Long.toString(temp));																					// set the text							textField.setText(operand);																			} // end if negate is false						else if(negate == true)						{							System.out.println("inside negate is true for hex, posval is " + posVal);							operand = Long.toHexString(posVal).toUpperCase();							textField.setText(operand);							binaryFieldDecimal(Long.toString(posVal));						}																	}					else if (oct == true)					{						// if the value to be negated is positive						if(negate == false)						{							// temp variable holds the integer value of the converted octal string, negated							Long temp = Long.parseLong(operand, 8)*-1;														// store the positive value;							posVal = Long.parseLong(operand, 8);														// convert temp (a negative decimal value) into an octal string							operand = Long.toOctalString(temp);														System.out.println(operand);																					// send temp to binaryFieldDecimal							binaryFieldDecimal(Long.toString(temp));																					// set the text							textField.setText(operand);																				} // end if negate is false						else if (negate == true)						{							System.out.println("inside else if negate is true for octal, posVal is " + posVal);							operand = Long.toOctalString(posVal);							textField.setText(operand);							binaryFieldDecimal(Long.toString(posVal));						}											}					else if (bin == true)					{												System.out.println(operand);											// if the value to be negated is positive						if(negate == false)						{							// temp variable holds the integer value of the converted binary string, negated							Long temp = Long.parseLong(operand, 2)*-1;														// store the positive value;							posVal = Long.parseLong(operand, 2);														// convert temp (a negated decimal value) into a binary string							operand = Long.toBinaryString(temp);														System.out.println("negative operand is" + operand);																					// send temp to binaryFieldDecimal							binaryFieldDecimal(Long.toString(temp));																					// set the text							textField.setText(operand);						} // end else if negate is false												// if the value to be negated is negative						else if (negate == true)						{							// flip the bits of the binary string							operand = operand.replaceAll("0", "x");							operand = operand.replaceAll("1", "0");							operand = operand.replaceAll("x", "1");														// set the binary text field							binaryFieldDecimal(Long.toString(Long.parseLong(operand, 2) + Long.parseLong("1", 2)));														// set operand							operand = Long.toBinaryString(Long.parseLong(operand, 2) + Long.parseLong("1", 2));													System.out.println("operand = " + operand);														// set the text							textField.setText(operand);						} // end else if negate is true						} // end else if bin is true																} // end else			} // end else if						negate ^= true;			System.out.println("negate is " + negate);					} // end action for negateButton				else if(e.getSource() == equalsButton)		{			// reset values			result = "";			resultForNegate = 0l;			boolean exception = false;						// if the plus button was the last one used, 			if(plus == true)			{				// and if the operand is not an empty string, 				if(operand != "")				{					if(dec == true)					{						// add the parsed string to op1						op1 += Long.parseLong(operand);					}					else if(hex == true)					{						// add the parsed string to op1						op1 += Long.parseLong(operand, 16);					}					else if(oct == true)					{						// add the parsed string to op1						op1 += Long.parseLong(operand, 8);					}					else if(bin == true)					{						// add the parsed string to op1						op1 += Long.parseLong(operand, 2);					}									}								// now op1 holds the result of the addition.								resultForNegate = op1;				if(dec == true)				{					result = Long.toString(op1);					textField.setText(result);					binaryFieldDecimal(result);				}				else if(hex == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toHexString(op1).toUpperCase();					textField.setText(result);									}				else if(oct == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toOctalString(op1);					textField.setText(result);				}				else if (bin == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toBinaryString(op1);					textField.setText(result);				}												// reset operand								operand = "";							} // end plus 			else if(minus == true)			{				if(operand != "")				{					if(dec == true)					{						// subtract the parsed string from op1						op1 -= Long.parseLong(operand);					}					else if(hex == true)					{						// subtract the parsed string from op1						op1 -= Long.parseLong(operand, 16);					}					else if(oct == true)					{						// subtract the parsed string from op1						op1 -= Long.parseLong(operand, 8);					}					else if(bin == true)					{						// subtract the parsed string from op1						op1 -= Long.parseLong(operand, 2);					}				}								// now op1 holds the result of the subtraction.				resultForNegate = op1;				if(dec == true)				{					result = Long.toString(op1);					textField.setText(result);					binaryFieldDecimal(result);				}				else if(hex == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toHexString(op1).toUpperCase();					textField.setText(result);									}				else if(oct == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toOctalString(op1);					textField.setText(result);				}				else if (bin == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toBinaryString(op1);					textField.setText(result);				}								// reset operand								operand = "";			} // end minus						else if(div == true)			{				if(operand != "")				{					if(dec == true)					{						try{							op1 /= Long.parseLong(operand);						}catch(Exception r)						{							textField.setText("Cannot divide by 0.");							exception = true;						}											}					else if(hex == true)					{						try{							op1 /= Long.parseLong(operand, 16);						}catch(Exception r)						{							textField.setText("Cannot divide by 0.");							exception = true;						}					}					else if(oct == true)					{						try{							op1 /= Long.parseLong(operand, 8);						}catch(Exception r)						{							textField.setText("Cannot divide by 0.");							exception = true;						}					}					else if(bin == true)					{						try{							op1 /= Long.parseLong(operand, 2);						}catch(Exception r){							exception = true;						} // end catch					} // end if bin == true				} // end if operand != ""								// now op1 holds the result of the division.				resultForNegate = op1;				if(dec == true)				{					if(exception == false)					{						result = Long.toString(op1);						textField.setText(result);						binaryFieldDecimal(result);					}					else{						textField.setText("Cannot divide by 0.");					}									}				else if(hex == true)				{					if(exception == false)					{						result = Long.toString(op1);						binaryFieldDecimal(result);						result = Long.toHexString(op1).toUpperCase();						textField.setText(result);					}					else{						textField.setText("Cannot divide by 0.");					}														}				else if(oct == true)				{					if(exception == false)					{						result = Long.toString(op1);						binaryFieldDecimal(result);						result = Long.toOctalString(op1);						textField.setText(result);					}					else{						textField.setText("Cannot divide by 0.");					}														}				else if (bin == true)				{					if(exception == false)					{						result = Long.toString(op1);						binaryFieldDecimal(result);						result = Long.toBinaryString(op1);						textField.setText(result);					}					else{						textField.setText("Cannot divide by 0.");					} 				}								// reset operand								operand = "";			} // end div						else if(mult == true)			{				if(operand != "")				{					if(dec == true)					{						// multiply the parsed string by op1						op1 *= Long.parseLong(operand);					}					else if(hex == true)					{						// multiply the parsed string by op1						op1 *= Long.parseLong(operand, 16);					}					else if(oct == true)					{						// multiply the parsed string by op1						op1 *= Long.parseLong(operand, 8);					}					else if(bin == true)					{						// multiply the parsed string by op1						op1 *= Long.parseLong(operand, 2);					}				}								// now op1 holds the result of the multiplication.				resultForNegate = op1;				if(dec == true)				{					result = Long.toString(op1);					textField.setText(result);					binaryFieldDecimal(result);				}				else if(hex == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toHexString(op1).toUpperCase();					textField.setText(result);									}				else if(oct == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toOctalString(op1);					textField.setText(result);				}				else if (bin == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toBinaryString(op1);					textField.setText(result);				}								// reset operand								operand = "";			} // end minus			else if (mod == true)			{				if(operand != "")				{					if(dec == true)					{						// mod						op1 %= Long.parseLong(operand);					}					else if(hex == true)					{						// mod						op1 %= Long.parseLong(operand, 16);					}					else if(oct == true)					{						// mod						op1 %= Long.parseLong(operand, 8);					}					else if(bin == true)					{						// mod						op1 %= Long.parseLong(operand, 2);					}				}								// now op1 holds the result of the modulus operation.				resultForNegate = op1;				if(dec == true)				{					result = Long.toString(op1);					textField.setText(result);					binaryFieldDecimal(result);				}				else if(hex == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toHexString(op1).toUpperCase();					textField.setText(result);									}				else if(oct == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toOctalString(op1);					textField.setText(result);				}				else if (bin == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toBinaryString(op1);					textField.setText(result);				}								// reset operand							operand = "";				}						negatedOperand = resultForNegate;												plus = false;			minus = false;			div = false;			mult = false;			equals = true;															} // end action for equalsButton		else if (e.getSource() == mntmHideCalculator)		{			this.setState(Calculator.ICONIFIED);			System.out.println("Calculator hidden.");		}		else if (e.getSource() == mntmCopyText)		{			StringSelection stringSelection = new StringSelection(operand);			Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();			clpbrd.setContents(stringSelection, null);			System.out.println("Text was copied to clipboard.");		}		else if(e.getSource() == btnViewHelp)		{			URI link;			System.out.println("view help");			try {				link = new URI("https://support.microsoft.com/en-us/products/windows?os=windows-10");				openWebpage(link);			} catch (URISyntaxException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}								}		// if the hex button is clicked, enable the hex buttons		else if(e.getSource() == hexButton)		{						if(operand != "")			{				//if dec was the last radio button selected				if(dec == true)				{					if(negate == false)					{												// parse the decimal string as a decimal integer, then as a decimal string 						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 10)));																		// parse the operand from a decimal string to a decimal value, then to a hex string						operand = Long.toHexString(Long.parseLong(operand, 10)).toUpperCase();						textField.setText(operand);						} // end else if negate is false					else if(negate == true)					{						operand = Long.toHexString(posVal*-1).toUpperCase();						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					} // end else if negate is true									}				else if (oct == true)				{					if(negate == false)					{						// parse the octal string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 8)));												// parse the operand from an octal string to a decimal value, then to a hex string						operand = Long.toHexString(Long.parseLong(operand, 8));						textField.setText(operand);					} // end if negate is false					else if (negate == true)					{						operand = Long.toString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					} // end else if negate is true														}				else if(bin == true)				{					if(negate == false)					{						// parse the binary string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 2)));																		// parse the operand from a binary string to a decimal value, then to a hex string						operand = Long.toHexString(Long.parseLong(operand, 2)).toUpperCase();						textField.setText(operand);					} // end if negate is false					else if (negate == true)					{						operand = Long.toString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					} // end else if negate is true									} // end else if bin is true											}  // end if operand is not empty						// if the operand is empty, use (result) to parse instead. Then reset result and set equals to 0			if(equals == true || equalsKey == true)			{				//if dec was the last radio button selected				if(dec == true)				{					if(negate == false)					{						// parse the decimal string as a decimal integer, then as a decimal string 						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(result, 10)));																		// parse the operand from a decimal string to a decimal value, then to a hex string						operand = Long.toHexString(Long.parseLong(result, 10)).toUpperCase();						textField.setText(operand);						} // end else if negate is false					else if(negate == true)					{						operand = Long.toHexString(posVal*-1).toUpperCase();						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					} // end else if negate is true									}				else if (oct == true)				{					if(negate == false)					{						// parse the octal string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(result, 8)));												// parse the operand from an octal string to a decimal value, then to a hex string						operand = Long.toHexString(Long.parseLong(result, 8)).toUpperCase();						textField.setText(operand);					} // end if negate is false					else if (negate == true)					{						operand = Long.toString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					} // end else if negate is true														}				else if(bin == true)				{					if(negate == false)					{						// parse the binary string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(result, 2)));																		// parse the operand from a binary string to a decimal value, then to a hex string						operand = Long.toHexString(Long.parseLong(result, 2)).toUpperCase();						textField.setText(operand);					} // end if negate is false					else if (negate == true)					{						operand = Long.toString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					} // end else if negate is true									} // end else if bin is true				result = "";				equals = false;			} // end if equals is true						AButton.setEnabled(true);        	BButton.setEnabled(true);        	CButton.setEnabled(true);        	DButton.setEnabled(true);        	EButton.setEnabled(true);        	FButton.setEnabled(true);        	twoButton.setEnabled(true);        	threeButton.setEnabled(true);        	fourButton.setEnabled(true);        	fiveButton.setEnabled(true);        	sixButton.setEnabled(true);        	sevenButton.setEnabled(true);        	eightButton.setEnabled(true);        	nineButton.setEnabled(true);        	        	hex = true;        	dec = false;        	oct = false;        	bin = false;        			}		else if(e.getSource() == decButton)		{						if(operand != "")			{				if(hex == true)				{					if(negate == false)					{						// parse the hex string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));												// parse the hex string as a decimal value, then convert to a decimal string						operand = Long.toString(Long.parseLong(operand, 16)).toUpperCase();						textField.setText(operand);					} // end if negate is false					else if (negate == true)					{						operand = Long.toString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					}									}				else if (oct == true)				{					if(negate == false)					{						// parse the octal string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 8)));												// parse the operand from an octal string to a decimal value, then to a decimal string						operand = Long.toString(Long.parseLong(operand, 8));						textField.setText(operand);					}					else if (negate == true)					{						operand = Long.toString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					}				} // end else if oct == true									else if (bin == true)				{					if(negate == false)					{						// parse the binary string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 2)));																		// parse the operand from a binary string to a decimal value, then to a decimal string						operand = Long.toString(Long.parseLong(operand, 2)).toUpperCase();						textField.setText(operand);					} // end if negate ==  false					else if (negate == true)					{						operand = Long.toString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					}									} // end else if bin  == true							} // end if operand is not empty						// if the operand is empty, use (result) to parse instead. Then reset result and set equals to 0						if(equals == true)						{							//if dec was the last radio button selected							if(hex == true)							{								if(negate == false)								{									System.out.println("This is being run it's all ok");									// parse the hex string as a decimal integer, then as a decimal string 									// and send to binaryFieldDecimal									binaryFieldDecimal(Long.toString(Long.parseLong(result, 16)));																																				// parse the operand from a hex string to a decimal value, then to a hex string									operand = Long.toString(Long.parseLong(result, 16)).toUpperCase();									textField.setText(operand);									} // end else if negate is false								else if(negate == true)								{									operand = Long.toHexString(posVal*-1).toUpperCase();									textField.setText(operand);									binaryFieldDecimal(Long.toString(posVal*-1));								} // end else if negate is true															}							else if (oct == true)							{								if(negate == false)								{									// parse the octal string as a decimal integer, then as a decimal string									// and send to binaryFieldDecimal									binaryFieldDecimal(Long.toString(Long.parseLong(result, 8)));																		// parse the operand from an octal string to a decimal value, then to a hex string									operand = Long.toHexString(Long.parseLong(result, 8));									textField.setText(operand);								} // end if negate is false								else if (negate == true)								{									operand = Long.toString(posVal*-1);									textField.setText(operand);									binaryFieldDecimal(Long.toString(posVal*-1));								} // end else if negate is true																							}							else if(bin == true)							{								if(negate == false)								{									// parse the binary string as a decimal integer, then as a decimal string									// and send to binaryFieldDecimal									binaryFieldDecimal(Long.toString(Long.parseLong(result, 2)));																											// parse the operand from a binary string to a decimal value, then to a hex string									operand = Long.toHexString(Long.parseLong(result, 2)).toUpperCase();									textField.setText(operand);								} // end if negate is false								else if (negate == true)								{									operand = Long.toString(posVal*-1);									textField.setText(operand);									binaryFieldDecimal(Long.toString(posVal*-1));								} // end else if negate is true															} // end else if bin is true							result = "";							equals = false;						} // end if equals is true									AButton.setEnabled(false);        	BButton.setEnabled(false);        	CButton.setEnabled(false);        	DButton.setEnabled(false);        	EButton.setEnabled(false);        	FButton.setEnabled(false);        	twoButton.setEnabled(true);        	threeButton.setEnabled(true);        	fourButton.setEnabled(true);        	fiveButton.setEnabled(true);        	sixButton.setEnabled(true);        	sevenButton.setEnabled(true);        	eightButton.setEnabled(true);        	nineButton.setEnabled(true);        	        	hex = false;        	dec = true;        	oct = false;        	bin = false;		} // end else if dec is clicked		else if(e.getSource() == octButton)		{			if(operand != "")			{				if(dec == true)				{					if(negate == false)					{						// parse the decimal string as a decimal integer, then as a decimal string 						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 10)));																		// parse the operand from a decimal string to a decimal value, then to a hex string						operand = Long.toOctalString(Long.parseLong(operand, 10)).toUpperCase();						textField.setText(operand);						} // end if negate is false					else if (negate == true)					{						operand = Long.toOctalString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					} // end else if negate == true									}				else if (hex == true)				{					if (negate == false)					{						// parse the hex string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));												// parse the hex string as a decimal value, then convert to a decimal string						operand = Long.toOctalString(Long.parseLong(operand, 16)).toUpperCase();						textField.setText(operand);					} // end if negate is false					else if (negate == true)					{						operand = Long.toOctalString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					} // end else if negate == false									}				else if (bin == true)				{					if(negate == false)					{						// parse the binary string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 2)));																		// parse the operand from a binary string to a decimal value, then to a hex string						operand = Long.toOctalString(Long.parseLong(operand, 2)).toUpperCase();						textField.setText(operand);					}					else if(negate == true)					{						operand = Long.toOctalString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					}									} // end else if bin is true							} // end else if operand is not empty						// if the operand is empty, use (result) to parse instead. Then reset result and set equals to 0						if(equals == true)						{							//if dec was the last radio button selected							if(dec == true)							{								if(negate == false)								{									// parse the decimal string as a decimal integer, then as a decimal string 									// and send to binaryFieldDecimal									binaryFieldDecimal(Long.toString(Long.parseLong(result, 10)));																											// parse the operand from a decimal string to a decimal value, then to a hex string									operand = Long.toOctalString(Long.parseLong(result, 10)).toUpperCase();									textField.setText(operand);									} // end else if negate is false								else if(negate == true)								{									operand = Long.toHexString(posVal*-1).toUpperCase();									textField.setText(operand);									binaryFieldDecimal(Long.toString(posVal*-1));								} // end else if negate is true															}							else if (oct == true)							{								if(negate == false)								{									// parse the octal string as a decimal integer, then as a decimal string									// and send to binaryFieldDecimal									binaryFieldDecimal(Long.toString(Long.parseLong(result, 8)));																		// parse the operand from an octal string to a decimal value, then to a hex string									operand = Long.toHexString(Long.parseLong(result, 8));									textField.setText(operand);								} // end if negate is false								else if (negate == true)								{									operand = Long.toString(posVal*-1);									textField.setText(operand);									binaryFieldDecimal(Long.toString(posVal*-1));								} // end else if negate is true																							}							else if(bin == true)							{								if(negate == false)								{									// parse the binary string as a decimal integer, then as a decimal string									// and send to binaryFieldDecimal									binaryFieldDecimal(Long.toString(Long.parseLong(result, 2)));																											// parse the operand from a binary string to a decimal value, then to a hex string									operand = Long.toHexString(Long.parseLong(result, 2)).toUpperCase();									textField.setText(operand);								} // end if negate is false								else if (negate == true)								{									operand = Long.toString(posVal*-1);									textField.setText(operand);									binaryFieldDecimal(Long.toString(posVal*-1));								} // end else if negate is true															} // end else if bin is true							result = "";							equals = false;						} // end if equals is true						AButton.setEnabled(false);        	BButton.setEnabled(false);        	CButton.setEnabled(false);        	DButton.setEnabled(false);        	EButton.setEnabled(false);        	FButton.setEnabled(false);        	twoButton.setEnabled(true);        	threeButton.setEnabled(true);        	fourButton.setEnabled(true);        	fiveButton.setEnabled(true);        	sixButton.setEnabled(true);        	sevenButton.setEnabled(true);        	eightButton.setEnabled(false);        	nineButton.setEnabled(false);			        	hex = false;        	dec = false;        	oct = true;        	bin = false;		} // end else if oct is clicked				else if(e.getSource() == binButton)		{			if(operand != "")			{				if(hex == true)				{					if(negate == false)					{						// parse the hex string as a decimal long, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 16)));												// parse the hex string as a decimal value, then convert to a decimal string						operand = Long.toBinaryString(Long.parseLong(operand, 16)).toUpperCase();												textField.setText(operand);					} // end if negate == false					else if (negate == true)					{						operand = Long.toBinaryString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					}														}				else if(dec == true)				{					if(negate == false)					{						// parse the decimal string as a decimal long, then as a decimal string 						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 10)));																		// parse the operand from a decimal string to a decimal value, then to a hex string						operand = Long.toBinaryString(Long.parseLong(operand, 10)).toUpperCase();						textField.setText(operand);					} // end if negate is false					else if (negate == true)					{						operand = Long.toBinaryString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					} // end else if negate == true										}				else if (oct == true)				{					if (negate == false)					{						// parse the octal string as a decimal integer, then as a decimal string						// and send to binaryFieldDecimal						binaryFieldDecimal(Long.toString(Long.parseLong(operand, 8)));												// parse the operand from an octal string to a decimal value, then to a binary string						operand = Long.toBinaryString(Long.parseLong(operand, 8));						textField.setText(operand);					}					else if (negate == true)					{						operand = Long.toBinaryString(posVal*-1);						textField.setText(operand);						binaryFieldDecimal(Long.toString(posVal*-1));					}									}											} // end if operand is not empty						// if the operand is empty, use (result) to parse instead. Then reset result and set equals to 0						if(equals == true)						{							//if dec was the last radio button selected							if(dec == true)							{								if(negate == false)								{									// parse the decimal string as a decimal integer, then as a decimal string 									// and send to binaryFieldDecimal									binaryFieldDecimal(Long.toString(Long.parseLong(result, 10)));																											// parse the operand from a decimal string to a decimal value, then to a hex string									operand = Long.toHexString(Long.parseLong(result, 10)).toUpperCase();									textField.setText(operand);									} // end else if negate is false								else if(negate == true)								{									operand = Long.toHexString(posVal*-1).toUpperCase();									textField.setText(operand);									binaryFieldDecimal(Long.toString(posVal*-1));								} // end else if negate is true															}							else if (oct == true)							{								if(negate == false)								{									// parse the octal string as a decimal integer, then as a decimal string									// and send to binaryFieldDecimal									binaryFieldDecimal(Long.toString(Long.parseLong(result, 8)));																		// parse the operand from an octal string to a decimal value, then to a hex string									operand = Long.toBinaryString(Long.parseLong(result, 8));									textField.setText(operand);								} // end if negate is false								else if (negate == true)								{									operand = Long.toString(posVal*-1);									textField.setText(operand);									binaryFieldDecimal(Long.toString(posVal*-1));								} // end else if negate is true																							}							else if(bin == true)							{								if(negate == false)								{									// parse the binary string as a decimal integer, then as a decimal string									// and send to binaryFieldDecimal									binaryFieldDecimal(Long.toString(Long.parseLong(result, 2)));																											// parse the operand from a binary string to a decimal value, then to a hex string									operand = Long.toHexString(Long.parseLong(result, 2)).toUpperCase();									textField.setText(operand);								} // end if negate is false								else if (negate == true)								{									operand = Long.toString(posVal*-1);									textField.setText(operand);									binaryFieldDecimal(Long.toString(posVal*-1));								} // end else if negate is true															} // end else if bin is true							result = "";							equals = false;						} // end if equals is true												AButton.setEnabled(false);        	BButton.setEnabled(false);        	CButton.setEnabled(false);        	DButton.setEnabled(false);        	EButton.setEnabled(false);        	FButton.setEnabled(false);        	twoButton.setEnabled(false);        	threeButton.setEnabled(false);        	fourButton.setEnabled(false);        	fiveButton.setEnabled(false);        	sixButton.setEnabled(false);        	sevenButton.setEnabled(false);        	eightButton.setEnabled(false);        	nineButton.setEnabled(false);			        	hex = false;        	dec = false;        	oct = false;        	bin = true;        			}								// keeps focus on the text field. This keeps the keylistener		// listening to keys at all times.		textField.requestFocus();			} // end actionPerformed			public static void openWebpage(URI uri) {	    Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;	    if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {	        try {	            desktop.browse(uri);	        } catch (Exception e) {	            e.printStackTrace();	        }	    }	}	public static void openWebpage(URL url) {	    try {	        openWebpage(url.toURI());	    } catch (URISyntaxException e) {	        e.printStackTrace();	    }	}			    // boolean values to be used with equals (for keys)		// determines which operation to perform on two operands.		boolean plusKey = false;		boolean minusKey = false;		boolean divKey = false;		boolean multKey = false;		boolean modKey = false; 		boolean equalsKey = false;						private JTextArea textArea;		private JMenuBar menuBar;		private JMenu mnView;		private JMenuItem mntmHideCalculator;		private JMenu mnEdit;		private JMenuItem mntmCopyText;		private JRadioButton hexButton;		private JRadioButton decButton;		private JRadioButton octButton;		private JRadioButton binButton;		private final ButtonGroup buttonGroup = new ButtonGroup();		private JRadioButton rdbtnQword;		private JRadioButton rdbtnNewRadioButton;		private JRadioButton rdbtnWord;		private JMenu mnHelp;		private JButton btnViewHelp;		private JPanel panel;		private JPanel panel_1;		private JRadioButton rdbtnByte;		private JButton btnNewButton;		private JButton button;		private JButton button_1;		private JButton button_2;		private JButton button_3;		private JButton button_4;		private JButton button_5;		private JButton button_6;		private JButton button_7;		private JButton button_8;		private JButton button_9;		private JButton button_10;		private JButton button_11;		private JButton button_12;		private JButton button_13;		private JButton button_14;			// keylistener, hears keys typed	public void keyTyped(KeyEvent k)	{		// verify what the keylistener is hearing		// by printing it to the console		System.out.println("KeyListener hears: ");		System.out.println(k.getKeyChar());				// functionality for specific keys		if(k.getKeyChar() == '1')		{			if(equalsKey == true)			{				op1 = 0l;			} // end if						// add a 1 to the end of operand, 			// set the text field to operand, 			// and set the binary text field 			// to the binary equivalent of operand			operand = operand.concat("1");			textField.setText(operand);			binaryFieldDecimal(operand);		}		else if(k.getKeyChar() == '2')		{			if(equalsKey == true)			{				op1 = 0l;			}			operand = operand.concat("2");			textField.setText(operand);			binaryFieldDecimal(operand);		}		else if(k.getKeyChar() == '3')		{			if(equalsKey == true)			{				op1 = 0l;			}			operand = operand.concat("3");			textField.setText(operand);			binaryFieldDecimal(operand);		}		else if(k.getKeyChar() == '4')		{			if(equalsKey == true)			{				op1 = 0l;			}			operand = operand.concat("4");			textField.setText(operand);			binaryFieldDecimal(operand);		}		else if(k.getKeyChar() == '5')		{			if(equalsKey == true)			{				op1 = 0l;			}			operand = operand.concat("5");			textField.setText(operand);			binaryFieldDecimal(operand);		}		else if(k.getKeyChar() == '6')		{			if(equalsKey == true)			{				op1 = 0l;			}			operand = operand.concat("6");			textField.setText(operand);			binaryFieldDecimal(operand);		}		else if(k.getKeyChar() == '7')		{			if(equalsKey == true)			{				op1 = 0l;			}			operand = operand.concat("7");			textField.setText(operand);			binaryFieldDecimal(operand);		}		else if(k.getKeyChar() == '8')		{			if(equalsKey == true)			{				op1 = 0l;			}			operand = operand.concat("8");			textField.setText(operand);			binaryFieldDecimal(operand);		}		else if(k.getKeyChar() == '9')		{			if(equalsKey == true)			{				op1 = 0l;			}			operand = operand.concat("9");			textField.setText(operand);			binaryFieldDecimal(operand);		}		else if(k.getKeyChar() == '0')		{			if(equalsKey == true)			{				op1 = 0l;			}			if(operand != "")			{				operand = operand.concat("0");				textField.setText(operand);				binaryFieldDecimal(operand);			}					}		else if (k.getKeyChar() == '+')		{			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// plus was used				plusKey = true;				minusKey = false;				divKey= false;				multKey = false;				modKey = false;				equalsKey = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// plus was used				plusKey = true;				minusKey = false;				divKey = false;				multKey = false;				modKey = false;				equalsKey = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// plus was used				plusKey = true;				minusKey = false;				divKey = false;				multKey = false;				modKey = false;				equalsKey = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// plus was used				plusKey = true;				minusKey = false;				divKey = false;				multKey = false;				modKey = false;				equalsKey = false;			} // end if bin is selected		} // end else if plus key was typed		else if (k.getKeyChar() == '-')		{			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// minus was used				plusKey = false;				minusKey = true;				divKey = false;				multKey = false;				modKey = false;				equalsKey = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// minus was used				plusKey = false;				minusKey = true;				divKey = false;				multKey = false;				modKey = false;				equalsKey = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// minus was used				plusKey = false;				minusKey = true;				divKey = false;				multKey = false;				modKey = false;				equalsKey = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// minus was used				plusKey = false;				minusKey = true;				divKey = false;				multKey = false;				modKey = false;				equalsKey = false;			} // end if bin is selected		} // end else if minus key was typed		else if (k.getKeyChar() == '/')		{			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// div was used				plusKey = false;				minusKey = false;				divKey = true;				multKey = false;				modKey = false;				equalsKey = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// div was used				plusKey = false;				minusKey = false;				divKey = true;				multKey = false;				modKey = false;				equalsKey = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// div was used				plusKey = false;				minusKey = false;				divKey = true;				multKey = false;				modKey = false;				equalsKey = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// div was used				plusKey = false;				minusKey = false;				divKey = true;				multKey = false;				modKey = false;				equalsKey = false;			} // end if bin is selected		} // end else if divide key was typed		else if (k.getKeyChar() == '*')		{			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// mult was used				plusKey = false;				minusKey = false;				divKey = false;				multKey = true;				modKey = false;				equalsKey = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// mult was used				plusKey = false;				minusKey = false;				divKey = false;				multKey = true;				modKey = false;				equalsKey = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// mult was used				plusKey = false;				minusKey = false;				divKey = false;				multKey = true;				modKey = false;				equalsKey = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// mult was used				plusKey = false;				minusKey = false;				divKey = false;				multKey = true;				modKey = false;				equalsKey = false;			} // end if bin is selected		} // end else if mult key was typed		else if (k.getKeyChar() == '%')		{			if(decButton.isSelected())			{				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				} // end if operand string is not empty								// reset operand				operand = "";								// mod was used				plusKey = false;				minusKey = false;				divKey = false;				multKey = false;				modKey = true;				equalsKey = false;			} // end if decimal is selected			else if (hexButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 16);				} // end if operand string is not empty								operand = "";								// mod was used				plusKey = false;				minusKey = false;				divKey = false;				multKey = false;				modKey = true;				equalsKey = false;			} // end if hex is selected			else if(octButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 8);				} // end if operand string is not empty								operand = "";								// mod was used				plusKey = false;				minusKey = false;				divKey = false;				multKey = false;				modKey = true;				equalsKey = false;			}			else if (binButton.isSelected())			{				if(operand != "")				{					// add the parsed hex string to op1					op1 += Long.parseLong(operand, 2);				} // end if operand string is not empty								operand = "";								// mod was used				plusKey = false;				minusKey = false;				divKey = false;				multKey = false;				modKey = true;				equalsKey = false;			} // end if bin is selected		} // end else if mod key was typed		else if (k.getKeyChar() == '\b')		{			if(operand.length() == 1)			{				operand = "0";				textField.setText(operand);				binaryFieldDecimal(operand);			} // end if operand has length 1			else if(operand == "")			{				// do nothing			} // end else if operand is empty			else // in this case, operand is a string of length greater than 1. Replace it in the 				// text field with a string equaling the original string without its last character.			{				String sub = operand.substring(0,  operand.length() - 1);				operand = sub;				textField.setText(operand);				binaryFieldDecimal(operand);			} // end else		} // end else if backspace was typed				// if the equals (=) button was typed		else if(k.getKeyChar() == '=')		{			String result = "";			Long resultForNegate = 0l;						// if the plus button was the last one used, 			if(plus == true || plusKey == true)			{				// and if the operand is not an empty string, 				if(operand != "")				{					// add the parsed string to op1					op1 += Long.parseLong(operand);				}								// now op1 holds the result of the addition.								resultForNegate = op1;				if(dec == true)				{					result = Long.toString(op1);					textField.setText(result);					binaryFieldDecimal(result);				}				else if(hex == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toHexString(op1).toUpperCase();					textField.setText(result);									}				else if(oct == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toOctalString(op1);					textField.setText(result);				}				else if (bin == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toBinaryString(op1);					textField.setText(result);				}												// reset operand								operand = "";							} // end plus 			else if(minus == true || minusKey == true)			{				if(operand != "")				{					// subtract the parsed string from op1					op1 -= Long.parseLong(operand);				}								// now op1 holds the result of the subtraction.								if(dec == true)				{					result = Long.toString(op1);					textField.setText(result);					binaryFieldDecimal(result);				}				else if(hex == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toHexString(op1).toUpperCase();					textField.setText(result);									}				else if(oct == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toOctalString(op1);					textField.setText(result);				}				else if (bin == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toBinaryString(op1);					textField.setText(result);				}								// reset operand								operand = "";			} // end minus						else if(div == true || divKey == true)			{				if(operand != "")				{					// divide op1 by the parsed operand					// through integer division					op1 /= Integer.parseInt(operand);				}								// now op1 holds the result of the division.								if(dec == true)				{					result = Long.toString(op1);					textField.setText(result);					binaryFieldDecimal(result);				}				else if(hex == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toHexString(op1).toUpperCase();					textField.setText(result);									}				else if(oct == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toOctalString(op1);					textField.setText(result);				}				else if (bin == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toBinaryString(op1);					textField.setText(result);				}								// reset operand								operand = "";			} // end div						else if(mult == true || multKey == true)			{				if(operand != "")				{					// multiply op1 by the parsed operand					op1 *= Long.parseLong(operand);				}								// now op1 holds the result of the multiplication.								if(dec == true)				{					result = Long.toString(op1);					textField.setText(result);					binaryFieldDecimal(result);				}				else if(hex == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toHexString(op1).toUpperCase();					textField.setText(result);									}				else if(oct == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toOctalString(op1);					textField.setText(result);				}				else if (bin == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toBinaryString(op1);					textField.setText(result);				}								// reset operand								operand = "";			} // end mult			else if (mod == true || modKey == true)			{				if(operand != "")				{					// multiply op1 by the parsed operand					op1 %= Long.parseLong(operand);				}								// now op1 holds the result of the modulus operation.								if(dec == true)				{					result = Long.toString(op1);					textField.setText(result);					binaryFieldDecimal(result);				}				else if(hex == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toHexString(op1).toUpperCase();					textField.setText(result);									}				else if(oct == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toOctalString(op1);					textField.setText(result);				}				else if (bin == true)				{					result = Long.toString(op1);					binaryFieldDecimal(result);					result = Long.toBinaryString(op1);					textField.setText(result);				}								// reset operand							operand = "";				} // end if mod is true						negatedOperand = resultForNegate;												plus = false;			minus = false;			div = false;			mult = false;			equals = true;			plusKey = false;			minusKey = false;			divKey = false;			multKey = false;			equalsKey = true;		}			} // end KeyTyped()	@Override	public void keyPressed(KeyEvent e) {		// do nothing			}	@Override	public void keyReleased(KeyEvent e) {		// do nothing			}		@Override	public void mouseClicked(MouseEvent arg0) {		// TODO Auto-generated method stub			}	@Override	public void mouseEntered(MouseEvent m) {		if(m.getSource() == oneButton)		{						oneButton.setBackground(Color.yellow);					}		else if(m.getSource() == twoButton)		{						twoButton.setBackground(Color.yellow);					}		else if(m.getSource() == threeButton)		{						threeButton.setBackground(Color.yellow);					}		else if(m.getSource() == fourButton)		{						fourButton.setBackground(Color.yellow);					}		else if(m.getSource() == fiveButton)		{						fiveButton.setBackground(Color.yellow);					}		else if(m.getSource() == sixButton)		{						sixButton.setBackground(Color.yellow);					}		else if(m.getSource() == sevenButton)		{						sevenButton.setBackground(Color.yellow);					}		else if(m.getSource() == eightButton)		{						eightButton.setBackground(Color.yellow);					}		else if(m.getSource() == nineButton)		{						nineButton.setBackground(Color.yellow);					}		else if(m.getSource() == zeroButton)		{						zeroButton.setBackground(Color.yellow);					}		else if(m.getSource() == backspaceButton)		{						backspaceButton.setBackground(Color.yellow);					}		else if(m.getSource() == ceButton)		{						ceButton.setBackground(Color.yellow);					}		else if(m.getSource() == clearButton)		{						clearButton.setBackground(Color.yellow);					}		else if(m.getSource() == negateButton)		{						negateButton.setBackground(Color.yellow);					}		else if(m.getSource() == divButton)		{						divButton.setBackground(Color.yellow);					}		else if(m.getSource() == multButton)		{						multButton.setBackground(Color.yellow);					}		else if(m.getSource() == minusButton)		{						minusButton.setBackground(Color.yellow);					}		else if(m.getSource() == plusButton)		{						plusButton.setBackground(Color.yellow);					}		else if(m.getSource() == equalsButton)		{						equalsButton.setBackground(Color.yellow);					}		else if(m.getSource() == modButton)		{						modButton.setBackground(Color.yellow);					}		else if(m.getSource() == AButton && hexButton.isSelected())		{						AButton.setBackground(Color.yellow);					}		else if(m.getSource() == BButton && hexButton.isSelected())		{						BButton.setBackground(Color.yellow);					}		else if(m.getSource() == CButton && hexButton.isSelected())		{						CButton.setBackground(Color.yellow);					}		else if(m.getSource() == DButton && hexButton.isSelected())		{						DButton.setBackground(Color.yellow);					}		else if(m.getSource() == EButton && hexButton.isSelected())		{						EButton.setBackground(Color.yellow);					}		else if(m.getSource() == FButton && hexButton.isSelected())		{						FButton.setBackground(Color.yellow);					}	} // end mouseEntered	@Override	public void mouseExited(MouseEvent l) {				if(l.getSource() == oneButton)		{			oneButton.setBackground(null);		}		else if(l.getSource() == twoButton)		{			twoButton.setBackground(null);		}		else if(l.getSource() == threeButton)		{			threeButton.setBackground(null);		}		else if(l.getSource() == fourButton)		{			fourButton.setBackground(null);		}		else if(l.getSource() == fiveButton)		{			fiveButton.setBackground(null);		}		else if(l.getSource() == sixButton)		{			sixButton.setBackground(null);		}		else if(l.getSource() == sevenButton)		{			sevenButton.setBackground(null);		}		else if(l.getSource() == eightButton)		{			eightButton.setBackground(null);		}		else if(l.getSource() == nineButton)		{			nineButton.setBackground(null);		}		else if(l.getSource() == zeroButton)		{			zeroButton.setBackground(null);		}		else if(l.getSource() == backspaceButton)		{			backspaceButton.setBackground(null);		}		else if(l.getSource() == ceButton)		{			ceButton.setBackground(null);		}		else if(l.getSource() == clearButton)		{			clearButton.setBackground(null);		}		else if(l.getSource() == negateButton)		{			negateButton.setBackground(null);		}		else if(l.getSource() == divButton)		{			divButton.setBackground(null);		}		else if(l.getSource() == multButton)		{			multButton.setBackground(null);		}		else if(l.getSource() == minusButton)		{			minusButton.setBackground(null);		}		else if(l.getSource() == plusButton)		{			plusButton.setBackground(null);		}		else if(l.getSource() == equalsButton)		{			equalsButton.setBackground(null);		}		else if(l.getSource() == modButton)		{			modButton.setBackground(null);		}		else if(l.getSource() == AButton && hexButton.isSelected())		{			AButton.setBackground(null);		}		else if(l.getSource() == BButton && hexButton.isSelected())		{			BButton.setBackground(null);		}		else if(l.getSource() == CButton && hexButton.isSelected())		{			CButton.setBackground(null);		}		else if(l.getSource() == DButton && hexButton.isSelected())		{			DButton.setBackground(null);		}		else if(l.getSource() == EButton && hexButton.isSelected())		{			EButton.setBackground(null);		}		else if(l.getSource() == FButton && hexButton.isSelected())		{			FButton.setBackground(null);		}	} // end mouseExited	@Override	public void mousePressed(MouseEvent arg0) {		// TODO Auto-generated method stub			}	@Override	public void mouseReleased(MouseEvent arg0) {		// TODO Auto-generated method stub			}			} // end class calculator